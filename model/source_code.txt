import os
import cv2

data_directory = '../data'
number_of_signs = 5
number_of_images_per_sign = 200
cap = cv2.VideoCapture(0)

sign_dictionary = {
    0: "I Love You",
    1: 'Yes',
    2: 'No',
    3: 'Hello',
    4: 'Wow'
}


def generate_images():
    if not os.path.exists(data_directory):
        os.makedirs(data_directory)

    for j in range(number_of_signs):
        if not os.path.exists(os.path.join(data_directory, str(sign_dictionary[j]))):
            os.makedirs(os.path.join(data_directory, str(sign_dictionary[j])))

        done = False
        while True:
            ret, frame = cap.read()
            cv2.putText(frame, 'Ready? Press "Q" ! :)', (100, 100), cv2.FONT_HERSHEY_SIMPLEX,
                        1.3,
                        (0, 255, 0),
                        3,
                        cv2.LINE_AA)
            cv2.putText(frame, 'Collecting data for class {}'.format(sign_dictionary[j]), (100, 50),
                        cv2.FONT_HERSHEY_SIMPLEX,
                        1.3,
                        (0, 255, 0),
                        3,
                        cv2.LINE_AA)
            cv2.imshow('frame', frame)
            if cv2.waitKey(25) == ord('q'):
                break

        counter = 0
        info_text = 'Collecting data for class {}'.format(sign_dictionary[j])
        while counter < number_of_images_per_sign:
            ret, frame = cap.read()
            cv2.putText(frame, info_text, (100, 50), cv2.FONT_HERSHEY_SIMPLEX,
                        1.3,
                        (0, 255, 0),
                        3,
                        cv2.LINE_AA)
            cv2.imshow('frame', frame)
            cv2.waitKey(25)
            cv2.imwrite(os.path.join(data_directory, str(sign_dictionary[j]), '{}.jpg'.format(counter)), frame)

            counter += 1

    cap.release()
    cv2.destroyAllWindows()


import os
import pickle

import mediapipe as mp
import cv2
import matplotlib.pyplot as plt

data_directory = '../data'
mp_hands_service = mp.solutions.hands
mp_drawing_service = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles
hands_processor = mp_hands_service.Hands(static_image_mode=True, min_detection_confidence=0.3)

data = []
labels = []


def create_dataset():

    for dir_names in os.listdir(data_directory):
        #TODO: add [:1] at the end of next line in order to get only one image per class (for capturing landmarks only)
        for img_path in os.listdir(os.path.join(data_directory, dir_names)):
            img = cv2.imread(os.path.join(data_directory, dir_names, img_path))
            img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

            results = hands_processor.process(img_rgb)
            if not results.multi_hand_landmarks:
                continue
            for hand_landmarks in results.multi_hand_landmarks:
                mp_drawing_service.draw_landmarks(
                    img_rgb,
                    hand_landmarks,
                    mp_hands_service.HAND_CONNECTIONS,
                    mp_drawing_styles.get_default_hand_landmarks_style(),
                    mp_drawing_styles.get_default_hand_connections_style()
                )

                min_y = min(landmark.y for landmark in hand_landmarks.landmark)
                min_x = min(landmark.x for landmark in hand_landmarks.landmark)

                data_aux = [(landmark.y - min_y, landmark.x - min_x) for landmark in hand_landmarks.landmark]
                flattened_data_aux = [item for sublist in data_aux for item in sublist]

                print(flattened_data_aux)

                data.append(flattened_data_aux)
                labels.append(dir_names)
            plt.figure()
            plt.imshow(img_rgb)
    f = open('../data.pickle', 'wb')
    pickle.dump({'data': data, 'labels': labels}, f)
    f.close()
    plt.show()

import pickle

from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.model_selection import GridSearchCV
import matplotlib.pyplot as plt
import numpy as np
param_grid = {
    'n_estimators': [50, 100, 200],  # numărul de arbori
    'max_depth': [None, 10, 20, 30]  # adâncimea maximă a arborilor
}


def train_model():
    data_dict = pickle.load(open('../data.pickle', 'rb'))

    data = np.asarray(data_dict['data'])
    labels = np.asarray(data_dict['labels'])
    x_train, x_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, shuffle=True, stratify=labels)

    rfc = RandomForestClassifier(random_state=42)

    # Crearea GridSearchCV
    grid_search = GridSearchCV(estimator=rfc, param_grid=param_grid, cv=5)

    # Antrenarea modelului cu GridSearchCV
    grid_search.fit(x_train, y_train)

    # Afișarea celor mai buni parametri
    print(grid_search.best_params_)

    y_predict = grid_search.predict(x_test)
    cm = confusion_matrix(y_test, y_predict)
    ConfusionMatrixDisplay(confusion_matrix=cm).plot()
    plt.show()
    score = accuracy_score(y_predict, y_test)

    print('{}% of samples were classified correctly !'.format(score * 100))
    print("The accuracy was: {}".format(score))

    f = open('../model.p', 'wb')
    pickle.dump({'model': grid_search}, f)
    f.close()


import pickle

import cv2
import mediapipe as mp

import time

model_dict = pickle.load(open('../model.p', 'rb'))
model = model_dict['model']

threshold = 0.5

previous_prediction = None
prediction_start_time = None
duration_threshold = 3  # 3 seconds

message_start_time = None
message_duration = 1  # 2 seconds
message = ''

cap = cv2.VideoCapture(0)

mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles

hands = mp_hands.Hands(static_image_mode=True, min_detection_confidence=0.3)


def run_model():
    while True:
        ret, frame = cap.read()
        H, W, _ = frame.shape
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = hands.process(frame_rgb)
        cv2.putText(frame, 'Press q to exit!', (100, 50), cv2.FONT_HERSHEY_SIMPLEX,
                    1.3,
                    (0, 0, 0),
                    3,
                    cv2.LINE_AA)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

        if not results.multi_hand_landmarks:
            previous_prediction = None
            prediction_start_time = None
            message = ''
            message_start_time = None
            pass
        else:
            for hand_landmarks in results.multi_hand_landmarks:
                mp_drawing.draw_landmarks(
                    frame,  # image to draw
                    hand_landmarks,  # model output
                    mp_hands.HAND_CONNECTIONS,  # hand connections
                    mp_drawing_styles.get_default_hand_landmarks_style(),
                    mp_drawing_styles.get_default_hand_connections_style())

                min_y = min(landmark.y for landmark in hand_landmarks.landmark)
                min_x = min(landmark.x for landmark in hand_landmarks.landmark)
                max_y = max(landmark.y for landmark in hand_landmarks.landmark)
                max_x = max(landmark.x for landmark in hand_landmarks.landmark)

                data_aux = [(landmark.y - min_y, landmark.x - min_x) for landmark in hand_landmarks.landmark]

                x1 = int(min_x * W) - 10
                y1 = int(min_y * H) - 10

                x2 = int(max_x * W) - 10
                y2 = int(max_y * H) - 10

                flattened_data_aux = [item for sublist in data_aux for item in sublist]
                prediction = model.predict([flattened_data_aux])
                prediction_proba = model.predict_proba([flattened_data_aux])
                print(prediction_proba)
                prediction_proba = prediction_proba.max()
                score = prediction_proba if prediction_proba > threshold else 'Inconclusive'
                predicted_character = prediction[0] if score != 'Inconclusive' else ""

                if previous_prediction == predicted_character:
                    if time.time() - prediction_start_time >= duration_threshold:
                        with open('signs.txt', 'a') as f:
                            f.write(predicted_character + '\n')
                        message = 'Character Recorded: ' + predicted_character
                        message_start_time = time.time()
                        previous_prediction = None
                        prediction_start_time = None
                else:
                    previous_prediction = predicted_character
                    prediction_start_time = time.time()
                if message and time.time() - message_start_time < message_duration:
                    cv2.putText(frame, message, (100, 100), cv2.FONT_HERSHEY_SIMPLEX, 1.3, (0, 0, 0), 3, cv2.LINE_AA)
                else:
                    message = ''
                    message_start_time = None
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 0), 4)
                cv2.putText(frame, predicted_character + ' ' + str(score), (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 1.3,
                            (0, 0, 0), 3,
                            cv2.LINE_AA)

        cv2.imshow('frame', frame)
        cv2.waitKey(1)

    cap.release()
    cv2.destroyAllWindows()


import pickle

from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import numpy as np

import matplotlib.pyplot as plt

data_dict = pickle.load(open('../data.pickle', 'rb'))

data = np.asarray(data_dict['data'])
labels = np.asarray(data_dict['labels'])

# Split data into training, validation, and test sets
X_train, X_temp, y_train, y_temp = train_test_split(data, labels, stratify=labels, test_size=0.3, random_state=1)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, stratify=y_temp, test_size=0.5, random_state=1)

learning_rates = [0.1, 0.01, 0.001, 0.0001]
train_accuracies = []
val_accuracies = []

for lr in learning_rates:
    clf = MLPClassifier(hidden_layer_sizes=(100, 100), max_iter=1000, random_state=1, learning_rate="constant", learning_rate_init=lr)
    clf.fit(X_train, y_train)
    # Calculate training accuracy
    y_train_pred = clf.predict(X_train)
    train_accuracy = accuracy_score(y_train, y_train_pred)
    train_accuracies.append(train_accuracy)

    # Calculate validation accuracy
    y_val_pred = clf.predict(X_val)
    val_accuracy = accuracy_score(y_val, y_val_pred)
    val_accuracies.append(val_accuracy)

# Plot training accuracies
plt.plot(learning_rates, train_accuracies, label='Training Accuracy')
# Plot validation accuracies
plt.plot(learning_rates, val_accuracies, label='Validation Accuracy')

plt.xscale('log')
plt.xlabel('Learning Rate')
plt.ylabel('Accuracy')
plt.title('Accuracy vs Learning Rate')
plt.legend()
plt.show()

from collect_imgs import generate_images
from create_dataset import create_dataset
from train_classifier import train_model
from inference_classifier import run_model


def main():
    while True:
        print("Please enter the number corresponding to the function you want to run:")
        print("1. Generate Images")
        print("2. Create Dataset")
        print("3. Train Model")
        print("4. Run Model")
        print("5. Exit")
        user_input = input()

        if user_input == '1':
            generate_images()
        elif user_input == '2':
            create_dataset()
        elif user_input == '3':
            train_model()
        elif user_input == '4':
            run_model()
        elif user_input == '5':
            break
        else:
            print("Invalid input. Please enter a number between 1 and 5.")

main()