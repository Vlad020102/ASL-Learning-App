// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BadgeRarity {
  Bronze
  Silver
  Gold
}

enum BadgeType {
  Level
  Question
}

enum QuizType {
  Bubbles
  Matching
  VideoText
  VideoAudio
  AlphabetStreak
}

enum QuizStatus {
  InProgress
  Completed
  Failed
  Locked
}

enum Difficulty {
  Hard
  Easy
  Moderate
}

enum BadgeStatus {
  Locked
  InProgress
  Completed
}

model User {
  id                     Int         @id @default(autoincrement())
  username               String      @unique
  password               String
  email                  String      @unique
  source                 String      @default("Google Search")
  dailyGoal              Int         @default(5) @map("daily_goal")
  learningReason         String      @default("For work or school") @map("learning_reason")
  level                  Int         @default(1)
  level_progress         Float       @default(0) @map("level_progress")
  questionsAnsweredTotal Int         @default(0) @map("questions_answered_total")
  questionsAnsweredToday Int         @default(0) @map("questions_correct_today")
  streak                 Int         @default(0)
  createdAt              DateTime    @default(now()) @map("created_at")
  updatedAt              DateTime    @default(now()) @map("updated_at")
  badges                 UserBadge[]
  quizzes                QuizUser[]

  @@map("users")
}

model Badge {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  rarity      BadgeRarity
  type        BadgeType
  icon        String
  description String
  target      Int        @default(0)

  users UserBadge[]

  @@map("badges")
}

model UserBadge {
  id       Int         @id @default(autoincrement())
  user     User        @relation(fields: [userID], references: [id])
  userID   Int         @map("user_id")
  badge    Badge       @relation(fields: [badgeID], references: [id])
  badgeID  Int         @map("badge_id")
  progress Int         @default(0)
  status   BadgeStatus @default(Locked)

  @@unique([userID, badgeID])
  @@map("user_badges")
}

model Lesson {
  id Int @id @default(autoincrement())

  @@map("lessons")
}

model Sign {
  id         Int        @id @default(autoincrement())
  difficulty Difficulty
  s3Url      String
  text       String     @unique

  quizes  QuizSigns[]
  phrases PhraseSign[]

  @@map("signs")
}

model Quiz {
  id    Int         @id @default(autoincrement())
  title String      @unique
  type  QuizType
  signs QuizSigns[]
  pairs QuizPair[]
  users QuizUser[]

  @@map("quizzes")
}

model Pair {
  id      Int    @id @default(autoincrement())
  text    String @unique
  signGif String

  quizes QuizPair[]
}

model Phrase {
  id         Int        @id @default(autoincrement())
  difficulty Difficulty
  text       String     @unique

  signs PhraseSign[]

  @@map("phrases")
}

model QuizUser {
  id             Int        @id @default(autoincrement())
  userID         Int        @map("user_id")
  quizID         Int        @map("quiz_id")
  status         QuizStatus @default(Locked)
  score          Float      @default(0)
  livesRemaining Int?       @default(5) @map("lives_remaining")
  createdAt      DateTime   @default(now()) @map("created_at")
  answeredAt     DateTime?  @map("answered_at")
  user           User       @relation(fields: [userID], references: [id])
  quiz           Quiz       @relation(fields: [quizID], references: [id])

  @@unique([userID, quizID])
}

model QuizSigns {
  id      Int     @id @default(autoincrement())
  quizID  Int     @map("quiz_id")
  signID  Int     @map("sign_id")
  options String? //this field can be used only for the Bubble Quiz type

  quiz Quiz @relation(fields: [quizID], references: [id])
  sign Sign @relation(fields: [signID], references: [id])

  @@map("quiz_signs")
}

model PhraseSign {
  id       Int  @id @default(autoincrement())
  signID   Int? @map("sign_id")
  phraseID Int? @map("phrase_id")
  order    Int?

  sign   Sign?   @relation(fields: [signID], references: [id])
  phrase Phrase? @relation(fields: [phraseID], references: [id])

  @@map("phrases_sign")
}

model QuizPair {
  id      Int @id @default(autoincrement())
  quiz_id Int
  pair_id Int

  matchIndex Int? @map("match_index")

  quiz Quiz @relation(fields: [quiz_id], references: [id])
  pair Pair @relation(fields: [pair_id], references: [id])

  @@map("quiz_pairs")
}
